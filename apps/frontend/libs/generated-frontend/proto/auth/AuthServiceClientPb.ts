/**
 * @fileoverview gRPC-Web generated client stub for Authentication
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: auth/auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_auth_pb from '../auth/auth_pb'; // proto import: "auth/auth.proto"


export class AuthenticationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };
  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/Register',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.RegistrationRequest,
    auth_auth_pb.RegistrationResponse,
    (request: auth_auth_pb.RegistrationRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.RegistrationResponse.deserializeBinary
  );
  methodDescriptorVerifyEmail = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/VerifyEmail',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.EmailVerificationRequest,
    auth_auth_pb.EmailVerificationResponse,
    (request: auth_auth_pb.EmailVerificationRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.EmailVerificationResponse.deserializeBinary
  );
  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/Login',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.LoginRequest,
    auth_auth_pb.LoginResponse,
    (request: auth_auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.LoginResponse.deserializeBinary
  );
  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/RefreshToken',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.RefreshTokenRequest,
    auth_auth_pb.RefreshTokenResponse,
    (request: auth_auth_pb.RefreshTokenRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.RefreshTokenResponse.deserializeBinary
  );
  methodDescriptorVerifyMultiFactorAuth = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/VerifyMultiFactorAuth',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.MultiFactorAuthRequest,
    auth_auth_pb.MultiFactorAuthResponse,
    (request: auth_auth_pb.MultiFactorAuthRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.MultiFactorAuthResponse.deserializeBinary
  );
  methodDescriptorGetUserProfile = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/GetUserProfile',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.GetUserProfileRequest,
    auth_auth_pb.UserProfile,
    (request: auth_auth_pb.GetUserProfileRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.UserProfile.deserializeBinary
  );
  methodDescriptorUpdateUserProfile = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/UpdateUserProfile',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.UpdateUserProfileRequest,
    auth_auth_pb.UpdateUserProfileResponse,
    (request: auth_auth_pb.UpdateUserProfileRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.UpdateUserProfileResponse.deserializeBinary
  );
  methodDescriptorChangePassword = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/ChangePassword',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.ChangePasswordRequest,
    auth_auth_pb.ChangePasswordResponse,
    (request: auth_auth_pb.ChangePasswordRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.ChangePasswordResponse.deserializeBinary
  );
  methodDescriptorForgotPassword = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/ForgotPassword',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.ForgotPasswordRequest,
    auth_auth_pb.ForgotPasswordResponse,
    (request: auth_auth_pb.ForgotPasswordRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.ForgotPasswordResponse.deserializeBinary
  );
  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/ResetPassword',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.ResetPasswordRequest,
    auth_auth_pb.ResetPasswordResponse,
    (request: auth_auth_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.ResetPasswordResponse.deserializeBinary
  );
  methodDescriptorCheckRoleBasedAccess = new grpcWeb.MethodDescriptor(
    '/Authentication.AuthenticationService/CheckRoleBasedAccess',
    grpcWeb.MethodType.UNARY,
    auth_auth_pb.RoleBasedAccessRequest,
    auth_auth_pb.RoleBasedAccessResponse,
    (request: auth_auth_pb.RoleBasedAccessRequest) => {
      return request.serializeBinary();
    },
    auth_auth_pb.RoleBasedAccessResponse.deserializeBinary
  );

  constructor(hostname: string,
              credentials?: null | { [index: string]: string; },
              options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  register(
    request: auth_auth_pb.RegistrationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.RegistrationResponse>;

  register(
    request: auth_auth_pb.RegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.RegistrationResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.RegistrationResponse>;

  register(
    request: auth_auth_pb.RegistrationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.RegistrationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/Register',
      request,
      metadata || {},
      this.methodDescriptorRegister);
  }

  verifyEmail(
    request: auth_auth_pb.EmailVerificationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.EmailVerificationResponse>;

  verifyEmail(
    request: auth_auth_pb.EmailVerificationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.EmailVerificationResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.EmailVerificationResponse>;

  verifyEmail(
    request: auth_auth_pb.EmailVerificationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.EmailVerificationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/VerifyEmail',
        request,
        metadata || {},
        this.methodDescriptorVerifyEmail,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/VerifyEmail',
      request,
      metadata || {},
      this.methodDescriptorVerifyEmail);
  }

  login(
    request: auth_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.LoginResponse>;

  login(
    request: auth_auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.LoginResponse>;

  login(
    request: auth_auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/Login',
      request,
      metadata || {},
      this.methodDescriptorLogin);
  }

  refreshToken(
    request: auth_auth_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.RefreshTokenResponse>;

  refreshToken(
    request: auth_auth_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.RefreshTokenResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.RefreshTokenResponse>;

  refreshToken(
    request: auth_auth_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.RefreshTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/RefreshToken',
      request,
      metadata || {},
      this.methodDescriptorRefreshToken);
  }

  verifyMultiFactorAuth(
    request: auth_auth_pb.MultiFactorAuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.MultiFactorAuthResponse>;

  verifyMultiFactorAuth(
    request: auth_auth_pb.MultiFactorAuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.MultiFactorAuthResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.MultiFactorAuthResponse>;

  verifyMultiFactorAuth(
    request: auth_auth_pb.MultiFactorAuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.MultiFactorAuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/VerifyMultiFactorAuth',
        request,
        metadata || {},
        this.methodDescriptorVerifyMultiFactorAuth,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/VerifyMultiFactorAuth',
      request,
      metadata || {},
      this.methodDescriptorVerifyMultiFactorAuth);
  }

  getUserProfile(
    request: auth_auth_pb.GetUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.UserProfile>;

  getUserProfile(
    request: auth_auth_pb.GetUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.UserProfile) => void): grpcWeb.ClientReadableStream<auth_auth_pb.UserProfile>;

  getUserProfile(
    request: auth_auth_pb.GetUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.UserProfile) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/GetUserProfile',
        request,
        metadata || {},
        this.methodDescriptorGetUserProfile,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/GetUserProfile',
      request,
      metadata || {},
      this.methodDescriptorGetUserProfile);
  }

  updateUserProfile(
    request: auth_auth_pb.UpdateUserProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.UpdateUserProfileResponse>;

  updateUserProfile(
    request: auth_auth_pb.UpdateUserProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.UpdateUserProfileResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.UpdateUserProfileResponse>;

  updateUserProfile(
    request: auth_auth_pb.UpdateUserProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.UpdateUserProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/UpdateUserProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateUserProfile,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/UpdateUserProfile',
      request,
      metadata || {},
      this.methodDescriptorUpdateUserProfile);
  }

  changePassword(
    request: auth_auth_pb.ChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.ChangePasswordResponse>;

  changePassword(
    request: auth_auth_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.ChangePasswordResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.ChangePasswordResponse>;

  changePassword(
    request: auth_auth_pb.ChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.ChangePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/ChangePassword',
        request,
        metadata || {},
        this.methodDescriptorChangePassword,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/ChangePassword',
      request,
      metadata || {},
      this.methodDescriptorChangePassword);
  }

  forgotPassword(
    request: auth_auth_pb.ForgotPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.ForgotPasswordResponse>;

  forgotPassword(
    request: auth_auth_pb.ForgotPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.ForgotPasswordResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.ForgotPasswordResponse>;

  forgotPassword(
    request: auth_auth_pb.ForgotPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.ForgotPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/ForgotPassword',
        request,
        metadata || {},
        this.methodDescriptorForgotPassword,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/ForgotPassword',
      request,
      metadata || {},
      this.methodDescriptorForgotPassword);
  }

  resetPassword(
    request: auth_auth_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.ResetPasswordResponse>;

  resetPassword(
    request: auth_auth_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.ResetPasswordResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.ResetPasswordResponse>;

  resetPassword(
    request: auth_auth_pb.ResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.ResetPasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/ResetPassword',
      request,
      metadata || {},
      this.methodDescriptorResetPassword);
  }

  checkRoleBasedAccess(
    request: auth_auth_pb.RoleBasedAccessRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_auth_pb.RoleBasedAccessResponse>;

  checkRoleBasedAccess(
    request: auth_auth_pb.RoleBasedAccessRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_auth_pb.RoleBasedAccessResponse) => void): grpcWeb.ClientReadableStream<auth_auth_pb.RoleBasedAccessResponse>;

  checkRoleBasedAccess(
    request: auth_auth_pb.RoleBasedAccessRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
                response: auth_auth_pb.RoleBasedAccessResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
        '/Authentication.AuthenticationService/CheckRoleBasedAccess',
        request,
        metadata || {},
        this.methodDescriptorCheckRoleBasedAccess,
        callback);
    }
    return this.client_.unaryCall(
      this.hostname_ +
      '/Authentication.AuthenticationService/CheckRoleBasedAccess',
      request,
      metadata || {},
      this.methodDescriptorCheckRoleBasedAccess);
  }

}


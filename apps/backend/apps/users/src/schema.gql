# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  verified: Boolean!
  birthday: DateTime
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserRole {
  ADMIN
  USER
}

"""Login response"""
type LoginResponse {
  token: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UserDeleteResponse {
  id: ID
  firstName: String
  lastName: String
  username: String
  email: String
  verified: Boolean
  birthday: DateTime
  role: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type Query {
  me(token: String!): User!
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): [User!]!
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  verified: BooleanFieldComparison
  birthday: DateFieldComparison
  role: UserRoleFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input UserRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserRole
  neq: UserRole
  gt: UserRole
  gte: UserRole
  lt: UserRole
  lte: UserRole
  like: UserRole
  notLike: UserRole
  iLike: UserRole
  notILike: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  firstName
  lastName
  username
  email
  verified
  birthday
  role
  createdAt
  updatedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  """Login a user"""
  login(credentials: Credentials!): LoginResponse!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
}

"""Login user"""
input Credentials {
  email: String!
  username: String!
  password: String!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserDto!
}

"""Create new user"""
input CreateUserDto {
  email: String!
  firstName: String!
  password: String!
  lastName: String!
  username: String!
  birthday: DateTime
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserDto!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateUser {
  id: ID
  firstName: String
  lastName: String
  username: String
  email: String
  verified: Boolean
  birthday: DateTime
  role: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  verified: BooleanFieldComparison
  birthday: DateFieldComparison
  role: UserRoleFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  username: StringFieldComparison
  email: StringFieldComparison
  verified: BooleanFieldComparison
  birthday: DateFieldComparison
  role: UserRoleFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}
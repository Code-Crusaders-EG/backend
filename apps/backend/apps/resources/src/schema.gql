# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
}

type Resource {
  id: ID!
  title: String!
  description: String!
  type: ResourceType!
  format: ResourceFormat!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: ID!
  author: User!
}

enum ResourceType {
  BOOK
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  ARTICLE
  CODE
  OTHER
}

enum ResourceFormat {
  PDF
  DOC
  DOCX
  XLS
  XLSX
  PPT
  PPTX
  MP3
  MP4
  WAV
  AVI
  MKV
  JPG
  JPEG
  PNG
  GIF
  OTHER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type ResourceDeleteResponse {
  id: ID
  title: String
  description: String
  type: ResourceType
  format: ResourceFormat
  createdAt: DateTime
  updatedAt: DateTime
  authorId: ID
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type ResourceEdge {
  """The node containing the Resource"""
  node: Resource!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type ResourceConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ResourceEdge!]!
}

type Query {
  resource(
    """The id of the record to find."""
    id: ID!
  ): Resource!
  resources(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ResourceFilter! = {}

    """Specify to sort results."""
    sorting: [ResourceSort!]! = []
  ): ResourceConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input ResourceFilter {
  and: [ResourceFilter!]
  or: [ResourceFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  type: ResourceTypeFilterComparison
  format: ResourceFormatFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  authorId: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input ResourceTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ResourceType
  neq: ResourceType
  gt: ResourceType
  gte: ResourceType
  lt: ResourceType
  lte: ResourceType
  like: ResourceType
  notLike: ResourceType
  iLike: ResourceType
  notILike: ResourceType
  in: [ResourceType!]
  notIn: [ResourceType!]
}

input ResourceFormatFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ResourceFormat
  neq: ResourceFormat
  gt: ResourceFormat
  gte: ResourceFormat
  lt: ResourceFormat
  lte: ResourceFormat
  like: ResourceFormat
  notLike: ResourceFormat
  iLike: ResourceFormat
  notILike: ResourceFormat
  in: [ResourceFormat!]
  notIn: [ResourceFormat!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input ResourceSort {
  field: ResourceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ResourceSortFields {
  id
  title
  description
  type
  format
  createdAt
  updatedAt
  authorId
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneResource(input: CreateOneResourceInput!): Resource!
  createManyResources(input: CreateManyResourcesInput!): [Resource!]!
  updateOneResource(input: UpdateOneResourceInput!): Resource!
  updateManyResources(input: UpdateManyResourcesInput!): UpdateManyResponse!
  deleteOneResource(input: DeleteOneResourceInput!): ResourceDeleteResponse!
  deleteManyResources(input: DeleteManyResourcesInput!): DeleteManyResponse!
}

input CreateOneResourceInput {
  """The record to create"""
  resource: CreateResourceDto!
}

"""Create new resource"""
input CreateResourceDto {
  authorId: String!
  description: String!
  format: String!
  title: String!
  type: String!
}

input CreateManyResourcesInput {
  """Array of records to create"""
  resources: [CreateResourceDto!]!
}

input UpdateOneResourceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateResource!
}

input UpdateResource {
  id: ID
  title: String
  description: String
  type: ResourceType
  format: ResourceFormat
  createdAt: DateTime
  updatedAt: DateTime
  authorId: ID
}

input UpdateManyResourcesInput {
  """Filter used to find fields to update"""
  filter: ResourceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateResource!
}

input ResourceUpdateFilter {
  and: [ResourceUpdateFilter!]
  or: [ResourceUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  type: ResourceTypeFilterComparison
  format: ResourceFormatFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  authorId: IDFilterComparison
}

input DeleteOneResourceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyResourcesInput {
  """Filter to find records to delete"""
  filter: ResourceDeleteFilter!
}

input ResourceDeleteFilter {
  and: [ResourceDeleteFilter!]
  or: [ResourceDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  description: StringFieldComparison
  type: ResourceTypeFilterComparison
  format: ResourceFormatFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  authorId: IDFilterComparison
}
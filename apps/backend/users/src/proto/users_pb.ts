// @generated by protoc-gen-es v1.7.1 with parameter "target=ts"
// @generated from file apps/backend/users/src/proto/users.proto (package users, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message users.UserEntity
 */
export class UserEntity extends Message<UserEntity> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string firstName = 2;
   */
  firstName = "";

  /**
   * @generated from field: string lastName = 3;
   */
  lastName = "";

  /**
   * @generated from field: string username = 4;
   */
  username = "";

  /**
   * @generated from field: string email = 6;
   */
  email = "";

  /**
   * @generated from field: bool verified = 7;
   */
  verified = false;

  /**
   * @generated from field: string role = 8;
   */
  role = "";

  /**
   * @generated from field: string hashedRefreshToken = 9;
   */
  hashedRefreshToken = "";

  constructor(data?: PartialMessage<UserEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.UserEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lastName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "hashedRefreshToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserEntity {
    return new UserEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserEntity {
    return new UserEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserEntity {
    return new UserEntity().fromJsonString(jsonString, options);
  }

  static equals(a: UserEntity | PlainMessage<UserEntity> | undefined, b: UserEntity | PlainMessage<UserEntity> | undefined): boolean {
    return proto3.util.equals(UserEntity, a, b);
  }
}

/**
 * @generated from message users.userId
 */
export class userId extends Message<userId> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<userId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "users.userId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): userId {
    return new userId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): userId {
    return new userId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): userId {
    return new userId().fromJsonString(jsonString, options);
  }

  static equals(a: userId | PlainMessage<userId> | undefined, b: userId | PlainMessage<userId> | undefined): boolean {
    return proto3.util.equals(userId, a, b);
  }
}


version: '3.8'

# name: gpthub
networks:
  GptHub:
    driver: bridge

services:
  postgres:
    image: postgres:alpine
    # restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    env_file:
      - .env
    environment:
      # POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_URL: ${POSTGRES_URL}
    networks:
      - GptHub
    # volumes:
    #   - ./postgres_data:/var/lib/postgresql/data/
    command:
      ['postgres', '-c', 'log_statement=all', '-c', 'log_destination=stderr']

  postgres-exporter:
    image: bitnami/postgres-exporter
    env_file:
      - .env
    environment:
      - DATA_SOURCE_NAME=${POSTGRES_URL}
    depends_on:
      - postgres
    networks:
      - GptHub

  mongodb:
    image: mongo:jammy
    # restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS}
      MONGO_INITDB_DATABASE: ${MONGODB_DB}
    networks:
      - GptHub
    ports:
      - 27017:27017
      - 9229:9229

  mongodb-exporter:
    image: bitnami/mongodb-exporter
    env_file:
      - .env
    networks:
      - GptHub
    command: ['--mongodb.uri=mongodb://admin:pass@mongodb:27017']
    ports:
      # - 17001:17001
      - 9216:9216

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - GptHub
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  kafka-exporter:
    image: danielqsj/kafka-exporter
    command: ['--kafka.server=kafka:9092']
    ports:
      - 9308:9308
    networks:
      - GptHub
    depends_on:
      - kafka

  api:
    build:
      dockerfile: ./apps/api/Dockerfile
      context: .
      target: development
    # image: gpthub-api
    env_file:
      - .env
    ports:
      - 3000:3000
    environment:
      DATABASE_URL: ${POSTGRES_URL}
      MONGODB_URI: ${MONGODB_URI}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASS: ${MONGODB_PASS}
      MONGODB_DB: ${MONGODB_DB}
    networks:
      - GptHub
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
      - mongodb
      - kafka
      - resources

  resources:
    build:
      dockerfile: ./apps/resources/Dockerfile
      context: .
      target: development
    # image: gpthub-api
    env_file:
      - .env
    # ports:
    #   - 3010:3010
    environment:
      # DATABASE_URL: ${POSTGRES_URL}
      MONGODB_URI: ${MONGODB_URI}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASS: ${MONGODB_PASS}
      MONGODB_DB: ${MONGODB_DB}
    networks:
      - GptHub
    volumes:
      - .:/usr/src/app
    depends_on:
      # - postgres
      - mongodb
      - kafka

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - '9200:9200'
  #
  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.15.2
  #   container_name: logstash
  #   volumes:
  #     - ./logstash-config:/usr/share/logstash/pipeline
  #   ports:
  #     - '5000:5000'
  #
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.15.2
  #   container_name: kibana
  #   ports:
  #     - '5601:5601'
  #   depends_on:
  #     - elasticsearch
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - GptHub

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3090:3000'
    networks:
      - GptHub
